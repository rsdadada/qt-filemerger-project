/****************************************************************************
** Meta object code from reading C++ file 'tst_customfilemodel.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.15.13)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <memory>
#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_customfilemodel.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.15.13. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestCustomFileModel_t {
    QByteArrayData data[34];
    char stringdata0[1002];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestCustomFileModel_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestCustomFileModel_t qt_meta_stringdata_TestCustomFileModel = {
    {
QT_MOC_LITERAL(0, 0, 19), // "TestCustomFileModel"
QT_MOC_LITERAL(1, 20, 12), // "initTestCase"
QT_MOC_LITERAL(2, 33, 0), // ""
QT_MOC_LITERAL(3, 34, 15), // "cleanupTestCase"
QT_MOC_LITERAL(4, 50, 4), // "init"
QT_MOC_LITERAL(5, 55, 7), // "cleanup"
QT_MOC_LITERAL(6, 63, 25), // "testInitialState_EmptyDir"
QT_MOC_LITERAL(7, 89, 40), // "testModelConstruction_ValidPo..."
QT_MOC_LITERAL(8, 130, 33), // "testModelConstruction_Invalid..."
QT_MOC_LITERAL(9, 164, 15), // "testColumnCount"
QT_MOC_LITERAL(10, 180, 26), // "testHeaderData_DisplayRole"
QT_MOC_LITERAL(11, 207, 21), // "testRowCount_EmptyDir"
QT_MOC_LITERAL(12, 229, 25), // "testRowCount_PopulatedDir"
QT_MOC_LITERAL(13, 255, 21), // "testHasFiles_EmptyDir"
QT_MOC_LITERAL(14, 277, 25), // "testHasFiles_PopulatedDir"
QT_MOC_LITERAL(15, 303, 28), // "testIndexAndParent_RootItems"
QT_MOC_LITERAL(16, 332, 30), // "testIndexAndParent_NestedItems"
QT_MOC_LITERAL(17, 363, 20), // "testData_DisplayRole"
QT_MOC_LITERAL(18, 384, 31), // "testData_CheckStateRole_Initial"
QT_MOC_LITERAL(19, 416, 21), // "testFlags_IsCheckable"
QT_MOC_LITERAL(20, 438, 33), // "testSetData_CheckFile_EmitsSi..."
QT_MOC_LITERAL(21, 472, 47), // "testSetData_CheckFolder_Propa..."
QT_MOC_LITERAL(22, 520, 48), // "testSetData_UncheckFile_Paren..."
QT_MOC_LITERAL(23, 569, 25), // "testToggleCheckState_File"
QT_MOC_LITERAL(24, 595, 39), // "testToggleCheckState_Folder_P..."
QT_MOC_LITERAL(25, 635, 29), // "testSetAllCheckStates_Checked"
QT_MOC_LITERAL(26, 665, 31), // "testSetAllCheckStates_Unchecked"
QT_MOC_LITERAL(27, 697, 36), // "testGetCheckedFilesPaths_None..."
QT_MOC_LITERAL(28, 734, 41), // "testGetCheckedFilesPaths_Only..."
QT_MOC_LITERAL(29, 776, 38), // "testGetCheckedFilesPaths_Fold..."
QT_MOC_LITERAL(30, 815, 37), // "testGetCheckedFilesPaths_Mixe..."
QT_MOC_LITERAL(31, 853, 53), // "testSelectFilesByExtension_Sp..."
QT_MOC_LITERAL(32, 907, 44), // "testSelectFilesByExtensionRec..."
QT_MOC_LITERAL(33, 952, 49) // "testSelectFilesByExtensionRec..."

    },
    "TestCustomFileModel\0initTestCase\0\0"
    "cleanupTestCase\0init\0cleanup\0"
    "testInitialState_EmptyDir\0"
    "testModelConstruction_ValidPopulatedPath\0"
    "testModelConstruction_InvalidPath\0"
    "testColumnCount\0testHeaderData_DisplayRole\0"
    "testRowCount_EmptyDir\0testRowCount_PopulatedDir\0"
    "testHasFiles_EmptyDir\0testHasFiles_PopulatedDir\0"
    "testIndexAndParent_RootItems\0"
    "testIndexAndParent_NestedItems\0"
    "testData_DisplayRole\0"
    "testData_CheckStateRole_Initial\0"
    "testFlags_IsCheckable\0"
    "testSetData_CheckFile_EmitsSignal\0"
    "testSetData_CheckFolder_Propagation_EmitsSignal\0"
    "testSetData_UncheckFile_ParentUpdate_EmitsSignal\0"
    "testToggleCheckState_File\0"
    "testToggleCheckState_Folder_Propagation\0"
    "testSetAllCheckStates_Checked\0"
    "testSetAllCheckStates_Unchecked\0"
    "testGetCheckedFilesPaths_NoneChecked\0"
    "testGetCheckedFilesPaths_OnlyFilesChecked\0"
    "testGetCheckedFilesPaths_FolderChecked\0"
    "testGetCheckedFilesPaths_MixedContent\0"
    "testSelectFilesByExtension_SpecificFolder_NoRecursion\0"
    "testSelectFilesByExtensionRecursive_FromRoot\0"
    "testSelectFilesByExtensionRecursive_FromSubfolder"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestCustomFileModel[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      32,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  174,    2, 0x08 /* Private */,
       3,    0,  175,    2, 0x08 /* Private */,
       4,    0,  176,    2, 0x08 /* Private */,
       5,    0,  177,    2, 0x08 /* Private */,
       6,    0,  178,    2, 0x08 /* Private */,
       7,    0,  179,    2, 0x08 /* Private */,
       8,    0,  180,    2, 0x08 /* Private */,
       9,    0,  181,    2, 0x08 /* Private */,
      10,    0,  182,    2, 0x08 /* Private */,
      11,    0,  183,    2, 0x08 /* Private */,
      12,    0,  184,    2, 0x08 /* Private */,
      13,    0,  185,    2, 0x08 /* Private */,
      14,    0,  186,    2, 0x08 /* Private */,
      15,    0,  187,    2, 0x08 /* Private */,
      16,    0,  188,    2, 0x08 /* Private */,
      17,    0,  189,    2, 0x08 /* Private */,
      18,    0,  190,    2, 0x08 /* Private */,
      19,    0,  191,    2, 0x08 /* Private */,
      20,    0,  192,    2, 0x08 /* Private */,
      21,    0,  193,    2, 0x08 /* Private */,
      22,    0,  194,    2, 0x08 /* Private */,
      23,    0,  195,    2, 0x08 /* Private */,
      24,    0,  196,    2, 0x08 /* Private */,
      25,    0,  197,    2, 0x08 /* Private */,
      26,    0,  198,    2, 0x08 /* Private */,
      27,    0,  199,    2, 0x08 /* Private */,
      28,    0,  200,    2, 0x08 /* Private */,
      29,    0,  201,    2, 0x08 /* Private */,
      30,    0,  202,    2, 0x08 /* Private */,
      31,    0,  203,    2, 0x08 /* Private */,
      32,    0,  204,    2, 0x08 /* Private */,
      33,    0,  205,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestCustomFileModel::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<TestCustomFileModel *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->init(); break;
        case 3: _t->cleanup(); break;
        case 4: _t->testInitialState_EmptyDir(); break;
        case 5: _t->testModelConstruction_ValidPopulatedPath(); break;
        case 6: _t->testModelConstruction_InvalidPath(); break;
        case 7: _t->testColumnCount(); break;
        case 8: _t->testHeaderData_DisplayRole(); break;
        case 9: _t->testRowCount_EmptyDir(); break;
        case 10: _t->testRowCount_PopulatedDir(); break;
        case 11: _t->testHasFiles_EmptyDir(); break;
        case 12: _t->testHasFiles_PopulatedDir(); break;
        case 13: _t->testIndexAndParent_RootItems(); break;
        case 14: _t->testIndexAndParent_NestedItems(); break;
        case 15: _t->testData_DisplayRole(); break;
        case 16: _t->testData_CheckStateRole_Initial(); break;
        case 17: _t->testFlags_IsCheckable(); break;
        case 18: _t->testSetData_CheckFile_EmitsSignal(); break;
        case 19: _t->testSetData_CheckFolder_Propagation_EmitsSignal(); break;
        case 20: _t->testSetData_UncheckFile_ParentUpdate_EmitsSignal(); break;
        case 21: _t->testToggleCheckState_File(); break;
        case 22: _t->testToggleCheckState_Folder_Propagation(); break;
        case 23: _t->testSetAllCheckStates_Checked(); break;
        case 24: _t->testSetAllCheckStates_Unchecked(); break;
        case 25: _t->testGetCheckedFilesPaths_NoneChecked(); break;
        case 26: _t->testGetCheckedFilesPaths_OnlyFilesChecked(); break;
        case 27: _t->testGetCheckedFilesPaths_FolderChecked(); break;
        case 28: _t->testGetCheckedFilesPaths_MixedContent(); break;
        case 29: _t->testSelectFilesByExtension_SpecificFolder_NoRecursion(); break;
        case 30: _t->testSelectFilesByExtensionRecursive_FromRoot(); break;
        case 31: _t->testSelectFilesByExtensionRecursive_FromSubfolder(); break;
        default: ;
        }
    }
    (void)_a;
}

QT_INIT_METAOBJECT const QMetaObject TestCustomFileModel::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_TestCustomFileModel.data,
    qt_meta_data_TestCustomFileModel,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *TestCustomFileModel::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestCustomFileModel::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestCustomFileModel.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestCustomFileModel::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 32)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 32;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 32)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 32;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
